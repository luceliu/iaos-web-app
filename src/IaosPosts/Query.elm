-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module IaosPosts.Query exposing (DocumentRequiredArguments, DocumentsOptionalArguments, categories, document, documents)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import IaosPosts.InputObject
import IaosPosts.Interface
import IaosPosts.Object
import IaosPosts.Scalar
import IaosPosts.ScalarCodecs
import IaosPosts.Union
import Json.Decode as Decode exposing (Decoder)


type alias DocumentsOptionalArguments =
    { skip : OptionalArgument Int
    , limit : OptionalArgument Int
    , category : OptionalArgument String
    }


{-|

  - skip -
  - limit -
  - category -

-}
documents : (DocumentsOptionalArguments -> DocumentsOptionalArguments) -> SelectionSet decodesTo IaosPosts.Object.Document -> SelectionSet (List decodesTo) RootQuery
documents fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { skip = Absent, limit = Absent, category = Absent }

        optionalArgs =
            [ Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "category" filledInOptionals.category Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "documents" optionalArgs object_ (identity >> Decode.list)


type alias DocumentRequiredArguments =
    { slug : String }


{-|

  - slug -

-}
document : DocumentRequiredArguments -> SelectionSet decodesTo IaosPosts.Object.Document -> SelectionSet (Maybe decodesTo) RootQuery
document requiredArgs object_ =
    Object.selectionForCompositeField "document" [ Argument.required "slug" requiredArgs.slug Encode.string ] object_ (identity >> Decode.nullable)


{-| -}
categories : SelectionSet (Maybe (List String)) RootQuery
categories =
    Object.selectionForField "(Maybe (List String))" "categories" [] (Decode.string |> Decode.list |> Decode.nullable)
