-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module IaosPosts.Object.Document exposing (body, category, createdAt, frontmatter, slug, title)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import IaosPosts.InputObject
import IaosPosts.Interface
import IaosPosts.Object
import IaosPosts.Scalar
import IaosPosts.ScalarCodecs
import IaosPosts.Union
import Json.Decode as Decode


{-| Title extracted from frontmatter's `title`
-}
title : SelectionSet String IaosPosts.Object.Document
title =
    Object.selectionForField "String" "title" [] Decode.string


{-| Title converted to a slug
-}
slug : SelectionSet String IaosPosts.Object.Document
slug =
    Object.selectionForField "String" "slug" [] Decode.string


{-| Category extracted from frontmatter's `category`
-}
category : SelectionSet (Maybe String) IaosPosts.Object.Document
category =
    Object.selectionForField "(Maybe String)" "category" [] (Decode.string |> Decode.nullable)


{-| All frontmatter fields
-}
frontmatter : SelectionSet IaosPosts.ScalarCodecs.Json IaosPosts.Object.Document
frontmatter =
    Object.selectionForField "ScalarCodecs.Json" "frontmatter" [] (IaosPosts.ScalarCodecs.codecs |> IaosPosts.Scalar.unwrapCodecs |> .codecJson |> .decoder)


{-| Document body without frontmatter
-}
body : SelectionSet String IaosPosts.Object.Document
body =
    Object.selectionForField "String" "body" [] Decode.string


{-| Date when a document was created
-}
createdAt : SelectionSet IaosPosts.ScalarCodecs.Date IaosPosts.Object.Document
createdAt =
    Object.selectionForField "ScalarCodecs.Date" "createdAt" [] (IaosPosts.ScalarCodecs.codecs |> IaosPosts.Scalar.unwrapCodecs |> .codecDate |> .decoder)
